React JS(feat. Nomard Coder)

Rule 1 : html에 작성하지 않는다. (js, react js를 사용하여 element 생성) 

Rule 2 : 아래의 코드를 import하고 맨 아래의 script type을 바벨로 번역해야함
<script src="https://unpkg.com/react@17.0.2/umd/react.development.js"></script> -> React import
<script src="https://unpkg.com/react-dom@17.0.2/umd/react-dom.production.min.js"></script> -> ReactDom import
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script> -> babel import <script src="https://unpkg.com/prop-types@15.7.2/prop-types.js"></script>
-> PropTypes import
<script type="text/babel">

Rule 3 : 내가 만든 컴포넌트들(함수로 만든것들) Title, Button 과 같은 것들은 렌더링할때 첫 글자를 대문자로 작성 하여야함

* event
1) onClick
2) onChange : 변화 감지
3) onMouseEnter

1. React.js는 상태가 변화할때마다 refresh 된다.

2. { } 안에는 JS를 쓸 수 있음!!

3. 내가 사용하고 만든 컴포넌트들은 인자를 받아야 쓸 수 있음

4. 부모컴포넌트에서 상태가 변경되면 modifier함수에 의해서 리랜더링 하게 되는데 이 때 자식컴포넌트 전부 리랜더링 된다. -> 하지만 React.memo(); 를 통해서 리랜더링 될 필요없는 자식컴포넌트를 리랜더링 시키지 않을 수 있음!!

5. React.useState(초기값); ==> [value, modifier f] 첫번째 요소는 초기값, 두번째 요소는 그 값을 바꾸는 함수 -> 배열에 이름 부여를 하기위하여 아래와 같이 작성      const [counter, setCounter] = React.useState(); modifier 함수를 사용하면 전체가 다시 렌더링됨

6. Props (properties) 1) 생성한 컴포넌트의 props는 우리가 넣은 모든 것을 갖는 오브젝트가 된다. 2) 커스텀 컴포넌트(html type) vs props(just argument) -> 이름이 같아도 헷갈리지 않기, eventLisnter를 적용하려면 방법이 아예 다름 3) PropType -> 어떤 props를 받을건지 결정(검사)해주고 error를 내줌

7. useEffect(function,[dependency]) * dependency -> 지켜보려는 것 1) 실행하려는 function이 특정한 dependency에만 render 되길 바랄때 사용 ex) call API 2) 시작할때랑 dependency가 변화할때만 render 3) ex) useEffect( ( ) => console.log(“ ~~~ “ ) , [dep1, dep2] )  4) Cleanup function -> component가 destroy될 때 리턴으로 원하는 작업을 할 수 있음 

8. ToDoList 1) useState에서 상태의 초기값을 배열로 넘겨 주었을 때, 그 배열 안에 내용을 추가할 수 있음( … 을 통해서 배열 합치기) —> ex)  setToDos((currentArray) => [toDo, ...currentArray]); 2) modify 함수를 사용할 때 두가지의 옵션이 있음( 값을 직접 보내기, 함수를 통해 보내기 ) 3) Array를 가지고와서 그 안의 items를 바꿀수 있는 방법 => map(function, index ) 사용  * map() 을 사용 할 시에 elements에 key를 줘야함 —> {toDos.map((currentItem, index) => (
     		       <li key={index}>{currentItem}</li>
     		        ))}
